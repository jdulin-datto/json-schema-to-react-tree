{"version":3,"sources":["containers/JSONSchemaTree.tsx","containers/MyApp.tsx","index.tsx"],"names":["colorMap","any","grey","array","blue","boolean","integer","purple","null","yellow","number","string","green","undefined","object","properties","deepPurple","required","deepOrange","oneof","A100","anyof","allof","A700","enum","RenderNodes","schema","anyOf","TreeItem","nodeId","uuid","label","Typography","style","color","map","s","i","length","Divider","width","marginBottom","marginTop","height","variant","allOf","oneOf","items","Array","description","Grid","container","justify","alignItems","spacing","marginRight","marginLeft","Object","title","entries","n","schem","includes","type","pattern","const","enumType","str","toString","if","then","else","JSONSchemaTree","TreeView","defaultCollapseIcon","defaultExpandIcon","MyApp","props","hash","timestamp","transactions","bar","baz","boo","method","params","ReactDOM","render","greeting","document","getElementById"],"mappings":"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","file":"static/js/main.09669f8d.chunk.js","sourcesContent":["import React from \"react\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { JSONSchema7 } from \"json-schema\";\nimport { grey, green, purple, yellow, blue, deepOrange, deepPurple } from \"@material-ui/core/colors\";\nimport { Typography, Grid, Divider } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { v4 as uuid } from \"uuid\";\n\nconst colorMap: { [k: string]: string } = {\n  any: grey[500],\n  array: blue[400],\n  boolean: blue[500],\n  integer: purple[800],\n  null: yellow[900],\n  number: purple[500],\n  string: green[500],\n  undefined: grey[500],\n  object: blue[900],\n  properties: deepPurple[500],\n  required: deepOrange[500],\n  oneof: blue.A100,\n  anyof: blue[200],\n  allof: blue.A700,\n  enum: green[900],\n};\n\ninterface IProps {\n  schema: JSONSchema7;\n  nodeId?: string;\n}\n\ninterface IRenderNodes {\n  schema: JSONSchema7;\n  required?: boolean;\n}\n\nconst RenderNodes: React.FC<IRenderNodes> = ({ schema, required }) => {\n  if (schema.anyOf) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.anyof }}>Any Of</Typography>\n        }>\n        {schema.anyOf.map((s, i) => {\n          return (\n            <>\n              <RenderNodes schema={s as JSONSchema7} />\n              {schema && schema.anyOf && i !== (schema.anyOf.length - 1)\n                ? <Divider\n                    style={{\n                      width: \"100px\",\n                      marginBottom: \"10px\",\n                      marginTop: \"10px\",\n                      height: \"3px\",\n                    }}\n                    variant=\"inset\"\n                  />\n                : null\n              }\n            </>\n          );\n        })}\n      </TreeItem>\n    );\n  }\n\n  if (schema.allOf) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.allof }}>All Of</Typography>\n        }>\n        {schema.allOf.map((s, i) => {\n          return (\n            <>\n              <RenderNodes schema={s as JSONSchema7} />\n              {schema && schema.allOf && i !== (schema.allOf.length - 1)\n                ? <Divider\n                    style={{\n                      width: \"100px\",\n                      marginBottom: \"10px\",\n                      marginTop: \"10px\",\n                      height: \"3px\",\n                    }}\n                    variant=\"inset\"\n                  />\n                : null\n              }\n            </>\n          );\n        })}\n      </TreeItem>\n    );\n  }\n\n  if (schema.oneOf) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.oneof }}>One Of</Typography>\n        }>\n        <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }} />\n        {schema.oneOf.map((s, i) => {\n          return (\n            <>\n              <RenderNodes schema={s as JSONSchema7} />\n              {schema && schema.oneOf && i !== (schema.oneOf.length - 1)\n                ? <Divider\n                    style={{\n                      width: \"100px\",\n                      marginBottom: \"10px\",\n                      marginTop: \"10px\",\n                      height: \"3px\",\n                    }}\n                    variant=\"inset\"\n                  />\n                : null\n              }\n            </>\n          );\n        })}\n        <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }} />\n      </TreeItem>\n    );\n  }\n\n  if (schema.items instanceof Array) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.array }}>Array</Typography>\n        }>\n        <TreeItem\n          label={schema.description\n            ? <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >description</Typography>\n              <Typography>{schema.description}</Typography>\n            </Grid>\n            : null\n          }\n          nodeId={uuid()}\n        />\n        {schema.items.map((s, i) => {\n          return (\n            <>\n              <RenderNodes schema={s as JSONSchema7} />\n              {schema && schema.items && i !== ((schema.items as any).length - 1)\n                ? <Divider\n                  style={{\n                    width: \"100px\",\n                    marginBottom: \"10px\",\n                    marginTop: \"10px\",\n                    height: \"3px\",\n                  }}\n                  variant=\"inset\"\n                />\n                : null\n              }\n            </>\n          );\n        })}\n      </TreeItem>\n    );\n  }\n\n  if (schema.items instanceof Object) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.array }}>Array</Typography>\n        }>\n        <TreeItem\n          label={schema.title\n            ? <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >title</Typography>\n              <Typography>{schema.title}</Typography>\n            </Grid>\n            : null\n          }\n          nodeId={uuid()}\n        />\n        <TreeItem\n          label={schema.description\n            ? <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >description</Typography>\n              <Typography>{schema.description}</Typography>\n            </Grid>\n            : null\n          }\n          nodeId={uuid()}\n        />\n        <RenderNodes schema={schema.items} />\n      </TreeItem>\n    );\n  }\n\n  if (schema.properties) {\n    return (\n      <TreeItem\n        nodeId={uuid()}\n        label={\n          <Typography style={{ color: colorMap.object }}>{\"Object\"}</Typography>\n        }>\n        <TreeItem\n          label={schema.title\n            ? <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >title</Typography>\n              <Typography>{schema.title}</Typography>\n            </Grid>\n            : null\n          }\n          nodeId={uuid()}\n        />\n        <TreeItem\n          label={schema.description\n            ? <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >description</Typography>\n              <Typography>{schema.description}</Typography>\n            </Grid>\n            : null\n          }\n          nodeId={uuid()}\n        />\n        <TreeItem\n          label={\n            <Typography style={{ color: colorMap.properties }}>{\"properties\"}</Typography>\n          }\n          nodeId={uuid()}>\n          {\n            schema.properties &&\n            Object.entries(schema.properties)\n              .map(([n, s], i: number) => {\n                const schem: JSONSchema7 = s as JSONSchema7;\n                return (\n                  <TreeItem label={n} nodeId={uuid()}>\n                    <RenderNodes\n                      schema={schem}\n                      required={schema.required && schema.required.includes(n)}\n                    />\n                  </TreeItem>\n                );\n              })\n          }\n        </TreeItem>\n      </TreeItem>\n    );\n  }\n\n  return (\n    <>\n      {schema.title &&\n        <TreeItem\n          label={\n            <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\">\n                title\n              </Typography>\n              <Typography style={{ color: colorMap.title }}>{schema.title}</Typography>\n            </Grid>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {schema.type &&\n        <TreeItem\n          label={\n            <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >type</Typography>\n              <Typography style={{ color: colorMap[schema.type as any] }}>{schema.type}</Typography>\n            </Grid>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {\n        schema.description &&\n        <TreeItem\n          label={\n            <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >description</Typography>\n              <Typography>{schema.description}</Typography>\n            </Grid>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {\n        schema.pattern &&\n        <TreeItem\n          label={\n            <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >pattern</Typography>\n              <Typography>{schema.pattern}</Typography>\n            </Grid>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {\n        schema.const &&\n        <TreeItem\n          label={\n            <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n              <Typography\n                style={{ color: colorMap.undefined, marginRight: \"4px\", marginLeft: \"4px\" }}\n                variant=\"caption\"\n              >const</Typography>\n              <Typography>{schema.const}</Typography>\n            </Grid>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {\n        required &&\n        <TreeItem\n          label={\n            <Typography style={{ color: colorMap.required }}>required</Typography>\n          }\n          nodeId={uuid()}\n        />\n      }\n      {schema.enum &&\n        <TreeItem\n          nodeId={uuid()}\n          label={\n            <Typography\n              style={{ color: colorMap.enum, marginRight: \"4px\", marginLeft: \"4px\" }}\n            >enum</Typography>\n          }\n        >\n          {\n            schema.enum.map((enumType) => {\n              const str = enumType ? enumType.toString() : null;\n              return (\n                <TreeItem nodeId={uuid()} label={\n                  <Typography\n                    style={{ marginRight: \"4px\", marginLeft: \"4px\" }}\n                  >{str}</Typography>\n                } />\n              );\n            })\n          }\n        </TreeItem>\n      }\n      {schema.if &&\n        <TreeItem\n          nodeId={uuid()}\n          label={\n            <Typography\n              style={{ color: colorMap.enum, marginRight: \"4px\", marginLeft: \"4px\" }}\n            >if</Typography>\n          }\n        >\n          <RenderNodes schema={schema.if as JSONSchema7} />\n        </TreeItem>\n      }\n      {schema.then &&\n        <TreeItem\n          nodeId={uuid()}\n          label={\n            <Typography\n              style={{ color: colorMap.enum, marginRight: \"4px\", marginLeft: \"4px\" }}\n            >then</Typography>\n          }\n        >\n          <RenderNodes schema={schema.then as JSONSchema7} />\n        </TreeItem>\n      }\n      {schema.else &&\n        <TreeItem\n          nodeId={uuid()}\n          label={\n            <Typography\n              style={{ color: colorMap.enum, marginRight: \"4px\", marginLeft: \"4px\" }}\n            >else</Typography>\n          }\n        >\n          <RenderNodes schema={schema.else as JSONSchema7} />\n        </TreeItem>\n      }\n      {/* <div style={{ marginBottom: \"15px\" }} /> */}\n    </>\n  );\n};\n\n/*\n * A React component that renders a tree to display JSON Schema types\n */\nexport const JSONSchemaTree: React.FC<IProps> = ({ schema }) => {\n  return (\n    <TreeView\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <RenderNodes schema={schema} />\n    </TreeView>\n  );\n};\n\nexport default JSONSchemaTree;\n","import React from \"react\";\nimport JSONSchemaTree from \"./JSONSchemaTree\";\n\ninterface IProps {\n  greeting: string;\n}\n\nconst MyApp = (props: IProps) => {\n  return (\n    <>\n\n      <JSONSchemaTree\n        schema={{\n          type: \"object\",\n          properties: {\n            number: {\n              type: \"string\",\n            },\n            hash: {\n              type: \"string\",\n            },\n            timestamp: {\n              description: \"timestamp in which the block occured\",\n              title: \"Timestamp\",\n              type: \"string\",\n            },\n            transactions: {\n              type: \"string\",\n            },\n          },\n        }} />\n\n      <JSONSchemaTree schema={{\n        type: \"array\",\n        title: \"My Array\",\n        items: {\n          type: \"object\",\n          description: \"A Block\",\n          properties: {\n            number: {\n              type: \"boolean\",\n            },\n            hash: {\n              type: \"string\",\n            },\n            timestamp: {\n              description: \"timestamp in which the block occured\",\n              type: \"string\",\n            },\n            transactions: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                description: \"transactions that occurred within the block\",\n                properties: {\n                  hash: {\n                    type: \"string\",\n                  },\n                },\n              },\n            },\n          },\n        },\n      }} />\n      <JSONSchemaTree schema={{\n        allOf: [\n          {\n            oneOf: [\n              {\n                type: \"array\",\n                title: \"My Array\",\n                items: {\n                  type: \"object\",\n                  title: \"Block\",\n                  description: \"A Block\",\n                  required: [\"number\"],\n                  properties: {\n                    number: {\n                      type: \"boolean\",\n                    },\n                    hash: {\n                      title: \"Hash\",\n                      type: \"string\",\n                      description: \"hex string starts with 0x + hash\",\n                      pattern: \"/^0x{40}/\",\n                    },\n                    timestamp: {\n                      description: \"timestamp in which the block occured\",\n                      type: \"string\",\n                    },\n                    transactions: {\n                      type: \"object\",\n                      description: \"transactions that occurred within the block\",\n                      properties: {\n                        hash: {\n                          type: \"string\",\n                        },\n                        bar: {\n                          type: \"object\",\n                          properties: {\n                            number: {\n                              type: \"string\",\n                            },\n                            hash: {\n                              type: \"string\",\n                            },\n                            timestamp: {\n                              description: \"timestamp in which the block occured\",\n                              type: \"string\",\n                            },\n                            transactions: {\n                              type: \"string\",\n                            },\n                            baz: {\n                              type: \"object\",\n                              description: \"A Block\",\n                              properties: {\n                                number: {\n                                  type: \"boolean\",\n                                },\n                                hash: {\n                                  type: \"string\",\n                                },\n                                timestamp: {\n                                  description: \"timestamp in which the block occured\",\n                                  type: \"string\",\n                                },\n                                transactions: {\n                                  type: \"object\",\n                                  description: \"transactions that occurred within the block\",\n                                  properties: {\n                                    hash: {\n                                      allOf: [\n                                        {\n                                          type: \"string\",\n                                        },\n                                      ],\n                                    },\n                                  },\n                                },\n                                boo: {\n                                  type: \"object\",\n                                  description: \"A Block\",\n                                  properties: {\n                                    number: {\n                                      type: \"boolean\",\n                                    },\n                                    hash: {\n                                      type: \"string\",\n                                    },\n                                    timestamp: {\n                                      description: \"timestamp in which the block occured\",\n                                      type: \"string\",\n                                    },\n                                    transactions: {\n                                      type: \"object\",\n                                      description: \"transactions that occurred within the block\",\n                                      properties: {\n                                        hash: {\n                                          type: \"object\",\n                                          description: \"A Block\",\n                                          properties: {\n                                            number: {\n                                              type: \"boolean\",\n                                            },\n                                            hash: {\n                                              type: \"string\",\n                                            },\n                                            timestamp: {\n                                              description: \"timestamp in which the block occured\",\n                                              type: \"string\",\n                                            },\n                                            transactions: {\n                                              type: \"object\",\n                                              description: \"transactions that occurred within the block\",\n                                              properties: {\n                                                hash: {\n                                                  type: \"string\",\n                                                },\n                                              },\n                                            },\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n              {\n                type: \"array\",\n                title: \"My Array\",\n                items: {\n                  type: \"object\",\n                  title: \"Block\",\n                  description: \"A Block\",\n                  required: [\"number\"],\n                  properties: {\n                    number: {\n                      type: \"boolean\",\n                    },\n                    hash: {\n                      title: \"Hash\",\n                      type: \"string\",\n                      description: \"hex string starts with 0x + hash\",\n                      pattern: \"/^0x{40}/\",\n                    },\n                    timestamp: {\n                      description: \"timestamp in which the block occured\",\n                      type: \"string\",\n                    },\n                    transactions: {\n                      type: \"object\",\n                      description: \"transactions that occurred within the block\",\n                      properties: {\n                        hash: {\n                          type: \"string\",\n                        },\n                        bar: {\n                          type: \"object\",\n                          properties: {\n                            number: {\n                              type: \"string\",\n                            },\n                            hash: {\n                              type: \"string\",\n                            },\n                            timestamp: {\n                              description: \"timestamp in which the block occured\",\n                              type: \"string\",\n                            },\n                            transactions: {\n                              type: \"string\",\n                            },\n                            baz: {\n                              type: \"object\",\n                              description: \"A Block\",\n                              properties: {\n                                number: {\n                                  type: \"boolean\",\n                                },\n                                hash: {\n                                  type: \"string\",\n                                },\n                                timestamp: {\n                                  description: \"timestamp in which the block occured\",\n                                  type: \"string\",\n                                },\n                                transactions: {\n                                  type: \"object\",\n                                  description: \"transactions that occurred within the block\",\n                                  properties: {\n                                    hash: {\n                                      allOf: [\n                                        {\n                                          type: \"string\",\n                                        },\n                                      ],\n                                    },\n                                  },\n                                },\n                                boo: {\n                                  type: \"object\",\n                                  description: \"A Block\",\n                                  properties: {\n                                    number: {\n                                      type: \"boolean\",\n                                    },\n                                    hash: {\n                                      type: \"string\",\n                                    },\n                                    timestamp: {\n                                      description: \"timestamp in which the block occured\",\n                                      type: \"string\",\n                                    },\n                                    transactions: {\n                                      type: \"object\",\n                                      description: \"transactions that occurred within the block\",\n                                      properties: {\n                                        hash: {\n                                          type: \"object\",\n                                          description: \"A Block\",\n                                          properties: {\n                                            number: {\n                                              type: \"boolean\",\n                                            },\n                                            hash: {\n                                              type: \"string\",\n                                            },\n                                            timestamp: {\n                                              description: \"timestamp in which the block occured\",\n                                              type: \"string\",\n                                            },\n                                            transactions: {\n                                              type: \"object\",\n                                              description: \"transactions that occurred within the block\",\n                                              properties: {\n                                                hash: {\n                                                  type: \"string\",\n                                                },\n                                              },\n                                            },\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            ],\n          },\n          {\n            oneOf: [\n              {\n                type: \"array\",\n                title: \"My Array\",\n                items: {\n                  type: \"object\",\n                  title: \"Block\",\n                  description: \"A Block\",\n                  required: [\"number\"],\n                  properties: {\n                    number: {\n                      type: \"boolean\",\n                    },\n                    hash: {\n                      title: \"Hash\",\n                      type: \"string\",\n                      description: \"hex string starts with 0x + hash\",\n                      pattern: \"/^0x{40}/\",\n                    },\n                    timestamp: {\n                      description: \"timestamp in which the block occured\",\n                      type: \"string\",\n                    },\n                    transactions: {\n                      type: \"object\",\n                      description: \"transactions that occurred within the block\",\n                      properties: {\n                        hash: {\n                          type: \"string\",\n                        },\n                        bar: {\n                          type: \"object\",\n                          properties: {\n                            number: {\n                              type: \"string\",\n                            },\n                            hash: {\n                              type: \"string\",\n                            },\n                            timestamp: {\n                              description: \"timestamp in which the block occured\",\n                              type: \"string\",\n                            },\n                            transactions: {\n                              type: \"string\",\n                            },\n                            baz: {\n                              type: \"object\",\n                              description: \"A Block\",\n                              properties: {\n                                number: {\n                                  type: \"boolean\",\n                                },\n                                hash: {\n                                  type: \"string\",\n                                },\n                                timestamp: {\n                                  description: \"timestamp in which the block occured\",\n                                  type: \"string\",\n                                },\n                                transactions: {\n                                  type: \"object\",\n                                  description: \"transactions that occurred within the block\",\n                                  properties: {\n                                    hash: {\n                                      allOf: [\n                                        {\n                                          type: \"string\",\n                                        },\n                                      ],\n                                    },\n                                  },\n                                },\n                                boo: {\n                                  type: \"object\",\n                                  description: \"A Block\",\n                                  properties: {\n                                    number: {\n                                      type: \"boolean\",\n                                    },\n                                    hash: {\n                                      type: \"string\",\n                                    },\n                                    timestamp: {\n                                      description: \"timestamp in which the block occured\",\n                                      type: \"string\",\n                                    },\n                                    transactions: {\n                                      type: \"object\",\n                                      description: \"transactions that occurred within the block\",\n                                      properties: {\n                                        hash: {\n                                          type: \"object\",\n                                          description: \"A Block\",\n                                          properties: {\n                                            number: {\n                                              type: \"boolean\",\n                                            },\n                                            hash: {\n                                              type: \"string\",\n                                            },\n                                            timestamp: {\n                                              description: \"timestamp in which the block occured\",\n                                              type: \"string\",\n                                            },\n                                            transactions: {\n                                              type: \"object\",\n                                              description: \"transactions that occurred within the block\",\n                                              properties: {\n                                                hash: {\n                                                  type: \"string\",\n                                                },\n                                              },\n                                            },\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n              {\n                type: \"array\",\n                title: \"My Array\",\n                items: {\n                  type: \"object\",\n                  title: \"Block\",\n                  description: \"A Block\",\n                  required: [\"number\"],\n                  properties: {\n                    number: {\n                      type: \"boolean\",\n                    },\n                    hash: {\n                      title: \"Hash\",\n                      type: \"string\",\n                      description: \"hex string starts with 0x + hash\",\n                      pattern: \"/^0x{40}/\",\n                    },\n                    timestamp: {\n                      description: \"timestamp in which the block occured\",\n                      type: \"string\",\n                    },\n                    transactions: {\n                      type: \"object\",\n                      description: \"transactions that occurred within the block\",\n                      properties: {\n                        hash: {\n                          type: \"string\",\n                        },\n                        bar: {\n                          type: \"object\",\n                          properties: {\n                            number: {\n                              type: \"string\",\n                            },\n                            hash: {\n                              type: \"string\",\n                            },\n                            timestamp: {\n                              description: \"timestamp in which the block occured\",\n                              type: \"string\",\n                            },\n                            transactions: {\n                              type: \"string\",\n                            },\n                            baz: {\n                              type: \"object\",\n                              description: \"A Block\",\n                              properties: {\n                                number: {\n                                  type: \"boolean\",\n                                },\n                                hash: {\n                                  type: \"string\",\n                                },\n                                timestamp: {\n                                  description: \"timestamp in which the block occured\",\n                                  type: \"string\",\n                                },\n                                transactions: {\n                                  type: \"object\",\n                                  description: \"transactions that occurred within the block\",\n                                  properties: {\n                                    hash: {\n                                      allOf: [\n                                        {\n                                          type: \"string\",\n                                        },\n                                      ],\n                                    },\n                                  },\n                                },\n                                boo: {\n                                  type: \"object\",\n                                  description: \"A Block\",\n                                  properties: {\n                                    number: {\n                                      type: \"boolean\",\n                                    },\n                                    hash: {\n                                      type: \"string\",\n                                    },\n                                    timestamp: {\n                                      description: \"timestamp in which the block occured\",\n                                      type: \"string\",\n                                    },\n                                    transactions: {\n                                      type: \"object\",\n                                      description: \"transactions that occurred within the block\",\n                                      properties: {\n                                        hash: {\n                                          type: \"object\",\n                                          description: \"A Block\",\n                                          properties: {\n                                            number: {\n                                              type: \"boolean\",\n                                            },\n                                            hash: {\n                                              type: \"string\",\n                                            },\n                                            timestamp: {\n                                              description: \"timestamp in which the block occured\",\n                                              type: \"string\",\n                                            },\n                                            transactions: {\n                                              type: \"object\",\n                                              description: \"transactions that occurred within the block\",\n                                              properties: {\n                                                hash: {\n                                                  type: \"string\",\n                                                },\n                                              },\n                                            },\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        ],\n      }} />\n      <JSONSchemaTree\n        schema={{\n          oneOf: [\n            {\n              title: \"keccak\",\n              type: \"string\",\n              const: \"0x00123012030sasdfasdf\",\n              description: \"Hex representation of a Keccak 256 hash\",\n              pattern: \"^0x[a-fA-F\\\\d]{64}$\",\n            },\n            {\n              title: \"keccak\",\n              type: \"string\",\n              enum: [\"0x00\", \"0x1asdf\"],\n              description: \"Hex representation of a Keccak 256 hash\",\n              pattern: \"^0x[a-fA-F\\\\d]{64}$\",\n            },\n            {\n              if: {\n                properties: {\n                  method: {\n                    const: \"potatoe\",\n                  },\n                },\n              },\n              then: {\n                properties: {\n                  params: {\n                    oneOf: [\n                      {\n                        title: \"foo\",\n                        description: \"bar\",\n                        type: \"string\",\n                      },\n                    ],\n                  },\n                },\n              },\n            },\n          ],\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyApp;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MyApp from \"./containers/MyApp\";\n\nReactDOM.render(<MyApp greeting=\"foo\" />, document.getElementById(\"root\"));\n"],"sourceRoot":""}